import discord
from discord.ext import commands, tasks
from discord import Embed, app_commands
from discord.ui import Button, View, Select, Modal, TextInput
from discord.utils import get
import logging
import pytz
import re
import os
import json
from dotenv import load_dotenv
import asyncio
import sqlite3
from discord.ext import commands
from discord.ext.commands import CooldownMapping, BucketType
import time
from datetime import datetime, timezone, timedelta
from typing import List

# Configura√ß√µes dos intents
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

#comandos dm e message
AUTHORIZED_ROLES = [1235035964556972095, 1235035964556972099]
LOG_CHANNEL_ID = 1249235583637651507

# IDs do canal de provas e do canal de corre√ß√£o de provas
canal_prova_aluno_id = 1235035966876549126
canal_corrigir_prova_id = 1235035966876549127

# IDs dos cargos que podem visualizar o canal tempor√°rio
cargo_visualizacao_1_id = 1235035964556972095
cargo_visualizacao_2_id = 1235035964556972099

# ID do cargo respons√°vel por realizar a prova
cargo_prova_id = 1258746878946709566

# IDs dos cargos
cargo_visualizacao_1_id = 1235035964556972095
cargo_visualizacao_2_id = 1235035964556972099
cargo1_id = 1235035964573880397
cargo2_id = 1242992334640255078  # Funcion√°rio
cargo_para_remover_id = 1258746878946709566

# IDs dos cargos para promo√ß√£o
cargo_estagiario_id = 1235035964573880397 # Estagi√°rio
cargo_mecanico_id = 1235035964573880398 # Mec√¢nico
cargo_mecanico_senior_id = 1235035964556972094 # Mec√¢nico S√™nior

# ID do cargo de devedor
cargo_devedor_id = 1255196288698552321
cargo_devedor_adv_id = 1255196379609825350

# ID do canal de log/relat√≥rio de contrata√ß√£o
canal_log_contratacao_id = 1249235893634469888
# ID do canal de log/relat√≥rio de promo√ß√£o
canal_log_promocao_id = 1246992211749503085

#ID do cargo exonerado
cargo_exonerado_id = 1235035964556972093
canal_log_exoneracao_id = 1249236243448070306  # Canal onde o log ser√° enviado


# IDs dos cargos que voc√™ deseja incluir no ranking
cargos_desejados = [
    1235035964573880397, 1235035964573880398, 1235035964556972094,
    1235035964599042090, 1235035964599042091, 1235035964599042094,
    1235035964599042095
]

# Data de in√≠cio e fim da contagem ~~MENSAL~~
data_inicio = datetime(2024, 11, 1, tzinfo=timezone.utc)  # Define a data de in√≠cio com fuso hor√°rio UTC
data_fim = datetime(2024, 12, 1, tzinfo=timezone.utc)     # Define a data de fim com fuso hor√°rio UTC

# Vari√°vel para armazenar a mensagem do ranking
mensagem_ranking = None

# Defina o fuso hor√°rio
timezone_brasil = pytz.timezone('America/Sao_Paulo')

# Canal de destino para o ranking
canal_ranking_id = 1246991184593948764  # ID do canal ranking-tunning

# Caminho para o arquivo de relat√≥rios
relatorios_path = 'relatorios.json'

# Carregar dados de relat√≥rios
relatorios = {}
if os.path.exists(relatorios_path):
    try:
        with open(relatorios_path, 'r') as f:
            relatorios = json.load(f)
    except FileNotFoundError:
        pass  # Se o arquivo n√£o existir, o dicion√°rio j√° est√° vazio

# IDs dos cargos com permiss√£o
cargos_permitidos = [1235035964556972099, 1235035964556972095]

# IDs dos canais de voz a serem monitorados
canais_voz_ids = [
    1246984837223419944, 1244164121553932318, 1244170549312098354,
    1244170938355027978, 1244171050397470731, 1244174326949744711,
    1244174420139053077, 1247009675162161162
]

# IDs dos cargos CANAL HIERARQUIA
roles_hierarchy = {
    1235035964624080990: "CEO",
    1235035964624080989: "üëë",
    1235035964624080987: "prefeitura",
    1235035964599042095: "chefe",
    1235035964599042094: "sub chefe",
    1235035964599042091: "gerente",
    1235035964599042090: "sub-gerente",
    1235035964556972094: "mec√¢nico senior",
    1235035964573880398: "mec√¢nico",
    1235035964573880397: "estagi√°rio"
}

# ID do canal onde a hierarquia ser√° postada
canal_hierarquia_id = 1250878994346414121 # Substitua pelo ID do canal real

# Mensagem que ser√° editada
mensagem_hierarquia = None

# IDs dos cargos e canais
CARGO_IDS = {
    "ADV1": 1235035964556972100,
    "ADV2": 1235035964556972101,
    "ADV3": 1235035964573880390,
    "ADV4": 1255195989778628739,
    "REBAIXADO": 1235035964556972097,
    "DEVEDOR_MANUTENCAO": 1255196288698552321,
    "DEVEDOR_ADV": 1255196379609825350,
    "EXONERADO": 1235035964556972093
}

# ID do canal "devedores"
CANAL_DEVEDORES_ID = 1255178131707265066

# IDs dos cargos de advert√™ncia
CARGOS_ADVERTENCIA = {
    "devedor adv": 1255196379609825350,
    "devedor man": 1255196288698552321,
    "adv4": 1255195989778628739,
    "adv3": 1235035964573880390,
    "adv2": 1235035964556972101,
    "adv1": 1235035964556972100,
    "adv verbal": 1235035964556972098,
    "rebaixado": 1235035964556972097
}

# ID do canal de log de advert√™ncias
CANAL_LOG_ADVERTENCIA_ID = 1303200083772440577

#_______________________________________________________________________________

# fim vari√°veis, inicio bot de comandos

# Comando /adv
@bot.tree.command(name="adv", description="Adicionar advert√™ncia(s) a um ou mais usu√°rios.")
@app_commands.describe(
    ids="IDs dos usu√°rios, separados por v√≠rgula", 
    advs="Tipos de advert√™ncia (ex.: adv1, devedor adv, devedor manuten√ß√£o)", 
    motivo="Motivo da advert√™ncia"
)
@app_commands.checks.has_any_role(cargo_visualizacao_1_id, cargo_visualizacao_2_id)  # IDs de cargos autorizados
async def adv(interaction: discord.Interaction, ids: str, advs: str, motivo: str):
    try:
        # Convertendo IDs e tipos de advert√™ncia para listas
        ids = [int(id.strip()) for id in ids.split(",")]
        advs = [adv.strip().lower() for adv in advs.split(",")]

        guild = interaction.guild
        autor = interaction.user.mention  # Quem aplicou a advert√™ncia

        # Validar os tipos de advert√™ncia fornecidos
        cargos_adicionar = [CARGOS_ADVERTENCIA[adv] for adv in advs if adv in CARGOS_ADVERTENCIA]
        
        if not cargos_adicionar:
            await interaction.response.send_message("Nenhum tipo de advert√™ncia v√°lido foi especificado.", ephemeral=True)
            return

        # Canal de log
        canal_log = guild.get_channel(CANAL_LOG_ADVERTENCIA_ID)

        # Processar cada ID de usu√°rio
        for id_usuario in ids:
            membro = guild.get_member(id_usuario)
            if not membro:
                await interaction.response.send_message(f"Usu√°rio com ID {id_usuario} n√£o encontrado.", ephemeral=True)
                continue

            # Adicionar os cargos de advert√™ncia
            cargos_atuais = []
            for cargo_id in cargos_adicionar:
                cargo = guild.get_role(cargo_id)
                if cargo:
                    await membro.add_roles(cargo)
                    cargos_atuais.append(cargo.name)

            # Criar embed de log
            embed_advertencia = Embed(title="Advert√™ncia üö®", color=0xFF0000)
            embed_advertencia.add_field(name="Quem aplicou", value=autor, inline=False)
            embed_advertencia.add_field(name="Advertido", value=membro.mention, inline=False)
            embed_advertencia.add_field(name="Nome", value=membro.display_name, inline=False)
            embed_advertencia.add_field(name="Tipo de Advert√™ncia", value=", ".join(cargos_atuais), inline=False)
            embed_advertencia.add_field(name="Motivo", value=motivo, inline=False)

            # Enviar log para o canal de advert√™ncias e mensagem privada para o usu√°rio advertido
            if canal_log:
                await canal_log.send(embed=embed_advertencia)

            try:
                await membro.send(embed=embed_advertencia)
            except discord.Forbidden:
                print(f"N√£o foi poss√≠vel enviar mensagem para {membro.display_name} ({membro.id}) no privado.")

        await interaction.response.send_message("Advert√™ncia(s) aplicada(s) com sucesso!", ephemeral=True)

    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)

@adv.error
async def adv_error(interaction: discord.Interaction, error):
    if isinstance(error, app_commands.MissingAnyRole):
        await interaction.response.send_message("Voc√™ n√£o tem permiss√£o para usar este comando.", ephemeral=True)
    else:
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)
        print(f"Erro no comando /adv: {error}")

#consultarelat
@bot.tree.command(name="consultarelat", description="Consulta relat√≥rios de um usu√°rio em um per√≠odo.")
@app_commands.describe(user="Usu√°rio a ser consultado", data_inicio="Data de in√≠cio (DD/MM/YYYY)", data_fim="Data de fim (DD/MM/YYYY)")
async def consultarelat(interaction: discord.Interaction, user: discord.User, data_inicio: str, data_fim: str):
    # Verificar permiss√µes
    if not await has_allowed_role(interaction):
        await interaction.response.send_message("Voc√™ n√£o tem permiss√£o para usar este comando.", ephemeral=True)
        return

    try:
        # Converte as datas de string para objetos datetime e aplica o fuso hor√°rio do Brasil
        data_inicio_dt = datetime.strptime(data_inicio, "%d/%m/%Y").replace(tzinfo=timezone_brasil)
        data_fim_dt = datetime.strptime(data_fim, "%d/%m/%Y").replace(tzinfo=timezone_brasil)

        # Ajuste para incluir o dia inteiro na busca (at√© 23:59:59 do data_fim)
        data_fim_dt = data_fim_dt + timedelta(days=1) - timedelta(seconds=1)

    except ValueError:
        await interaction.response.send_message("Formato de data inv√°lido. Use DD/MM/YYYY.", ephemeral=True)
        return

    # Vari√°vel para contar os relat√≥rios dentro do per√≠odo
    total_relatorios = 0

    # Canal #relat-tunning
    canal_relatorios = bot.get_channel(1235035965945413649)

    if not canal_relatorios:
        await interaction.response.send_message("Erro: Canal de relat√≥rios n√£o encontrado.", ephemeral=True)
        return

    # Busca de mensagens no canal dentro do per√≠odo com os limites inclusivos
    async for message in canal_relatorios.history(after=data_inicio_dt - timedelta(seconds=1), before=data_fim_dt + timedelta(seconds=1), limit=None):
        if message.author == user:
            total_relatorios += 1

    await interaction.response.send_message(f"{user.mention} fez {total_relatorios} relat√≥rios de {data_inicio} a {data_fim}.")

# Fun√ß√£o de verifica√ß√£o de autoriza√ß√£o
def check_authorized_roles():
    async def predicate(interaction: discord.Interaction):
        return any(role.id in [123456, 654321] for role in interaction.user.roles)  # IDs de cargos autorizados
    return app_commands.check(predicate)

# Comando /mensagem
@bot.tree.command(name="mensagem", description="Enviar mensagem privada para todos os membros de um cargo.")
@app_commands.describe(cargo="Cargo alvo", mensagem="Mensagem a ser enviada")
@check_authorized_roles()
async def mensagem(interaction: discord.Interaction, cargo: discord.Role, mensagem: str):
    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    await interaction.response.send_message(f'Enviando mensagens para todos os membros com o cargo {cargo.mention}.', ephemeral=True)
    
    # Enviar a mensagem privada para cada membro com o cargo
    for member in cargo.members:
        try:
            await member.send(mensagem)
        except discord.Forbidden:
            await log_channel.send(f'N√£o foi poss√≠vel enviar a mensagem para {member.mention}.')
    
    # Registrar o log no canal
    await log_channel.send(
        f'Usu√°rio {interaction.user.mention} enviou a seguinte mensagem para o cargo {cargo.mention}:\n```\n{mensagem}\n```'
    )

# Tratamento de erros espec√≠fico para o comando /mensagem
@mensagem.error
async def mensagem_error(interaction: discord.Interaction, error):
    if isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message("Voc√™ n√£o tem permiss√£o para usar este comando.", ephemeral=True)
    else:
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)
        print(f"Erro no comando /mensagem: {error}")

# Comando /dm
@bot.tree.command(name="dm", description="Enviar mensagem privada para um usu√°rio espec√≠fico.")
@app_commands.describe(user="Usu√°rio alvo", mensagem="Mensagem a ser enviada")
@check_authorized_roles()
async def dm(interaction: discord.Interaction, user: discord.User, mensagem: str):
    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    try:
        await user.send(mensagem)
        await interaction.response.send_message(f'Mensagem enviada para {user.mention}.', ephemeral=True)
        
        # Log da mensagem no canal especificado
        if log_channel:
            await log_channel.send(
                f'Usu√°rio {interaction.user.mention} enviou a seguinte mensagem para {user.mention}:\n```\n{mensagem}\n```'
            )
    except discord.Forbidden:
        await interaction.response.send_message(f'N√£o foi poss√≠vel enviar a mensagem para {user.mention}.', ephemeral=True)

# Tratamento de erros do comando /dm
@dm.error
async def dm_error(interaction: discord.Interaction, error):
    if isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message("Voc√™ n√£o tem permiss√£o para usar este comando.", ephemeral=True)
    else:
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)
        print(f"Erro no comando /dm: {error}")

# Comando /contratar
@bot.tree.command(name="contratar", description="Contratar um novo membro e dar os cargos especificados.")
@app_commands.describe(nome="Primeiro nome do usu√°rio", id_cidade="ID da cidade", usuario="Usu√°rio a ser contratado")
@app_commands.checks.has_any_role(cargo_visualizacao_1_id, cargo_visualizacao_2_id)
async def contratar(interaction: discord.Interaction, nome: str, id_cidade: str, usuario: discord.User):
    try:
        recrutador = interaction.user
        recrutador_mention = recrutador.mention
        recrutador_id = recrutador.id

        nome_contratado = nome.split()[0]
        id_cidade = id_cidade
        id_discord = usuario.id

        guild = interaction.guild
        contratado = guild.get_member(id_discord)

        if contratado:
            novo_nome = f"üî®„Éª{nome_contratado} | {id_cidade}"
            try:
                await contratado.edit(nick=novo_nome)
                await contratado.add_roles(
                    guild.get_role(cargo1_id),
                    guild.get_role(cargo2_id)
                )

                # Remover o cargo especificado, se o usu√°rio o tiver
                cargo_para_remover = guild.get_role(cargo_para_remover_id)
                if cargo_para_remover in contratado.roles:
                    await contratado.remove_roles(cargo_para_remover)

                canal_log = guild.get_channel(canal_log_contratacao_id)
                data_inicio = datetime.now().strftime("%d/%m/%Y")
                data_exp = (datetime.now() + timedelta(days=3)).strftime("%d/%m/%Y")

                # Criar o embed de contrata√ß√£o com a cor verde
                embed_contratacao = discord.Embed(
                    title="üî® ‚îÉ CONTRATA√á√ÉO ‚îÉ üî®",
                    color=discord.Color.green()  # Verde
                )
                embed_contratacao.add_field(name="NOME", value=nome_contratado, inline=False)
                embed_contratacao.add_field(name="ID", value=id_cidade, inline=False)
                embed_contratacao.add_field(name="DISCORD", value=contratado.mention, inline=False)
                embed_contratacao.add_field(name="RECRUTADOR", value=recrutador_mention, inline=False)
                embed_contratacao.add_field(name="ID RECRUTADOR", value=f"({recrutador_id})", inline=False)
                embed_contratacao.add_field(name="DATA DE IN√çCIO DE CONTRATO", value=data_inicio, inline=False)
                embed_contratacao.add_field(name="DATA DE PER√çODO DE EXP", value=data_exp, inline=False)

                # Enviar o embed no canal de log
                await canal_log.send(embed=embed_contratacao)
                await interaction.response.send_message(f"Usu√°rio {contratado.mention} contratado com sucesso!", ephemeral=True)
            except discord.errors.Forbidden:
                await interaction.response.send_message("Permiss√µes insuficientes para editar o usu√°rio ou adicionar/remover cargos.", ephemeral=True)
        else:
            await interaction.response.send_message("Usu√°rio n√£o encontrado.", ephemeral=True)
    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)

# Tratamento de erros espec√≠fico para o comando /contratar
@contratar.error
async def contratar_error(interaction: discord.Interaction, error):
    if isinstance(error, app_commands.MissingAnyRole):
        await interaction.response.send_message("Voc√™ n√£o tem permiss√£o para usar este comando.", ephemeral=True)
    else:
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)
        print(f"Erro no comando /contratar: {error}")

# Comando /promover
@bot.tree.command(name="promover", description="Promover um estagi√°rio para mec√¢nico.")
@app_commands.describe(usuario="Usu√°rio a ser promovido (men√ß√£o ou ID)")
@app_commands.checks.has_any_role(cargo_visualizacao_1_id, cargo_visualizacao_2_id)
async def promover(interaction: discord.Interaction, usuario: str):
    try:
        # Verificar se o par√¢metro √© uma men√ß√£o ou um ID
        if usuario.startswith("<@") and usuario.endswith(">"):
            id_discord = int(usuario[3:-1].replace("!", ""))  # Extrair ID da men√ß√£o
        else:
            id_discord = int(usuario)  # Converter para int se for um ID

        promotor = interaction.user
        promotor_mention = promotor.mention
        promotor_id = promotor.id

        guild = interaction.guild
        promovido = guild.get_member(id_discord)

        # Definir os cargos
        cargo_estagiario = guild.get_role(cargo_estagiario_id)
        cargo_mecanico = guild.get_role(cargo_mecanico_id)

        # Armazenar os nomes dos cargos
        cargo_estagiario_name = cargo_estagiario.name
        cargo_mecanico_name = cargo_mecanico.name

        if promovido:
            nome_contratado = promovido.display_name.split("„Éª")[1].split(" | ")[0]
            id_cidade = promovido.display_name.split(" | ")[1]
            novo_nome = f"üîß„Éª{nome_contratado} | {id_cidade}"

            try:
                await promovido.edit(nick=novo_nome)
                await promovido.add_roles(
                    cargo_mecanico,
                    guild.get_role(cargo2_id)  # Mant√©m o cargo de funcion√°rio
                )
                await promovido.remove_roles(cargo_estagiario)

                canal_log = guild.get_channel(canal_log_promocao_id)

                # Criar o embed de promo√ß√£o com a cor azul claro
                embed_promocao = discord.Embed(
                    title="‚è´ ‚îÉ PROMO√á√ÉO DE CARGO ‚îÉ ‚è´",
                    color=discord.Color.from_str("#00bfff")  # Azul claro
                )
                embed_promocao.add_field(name="Cargo Anterior", value=cargo_estagiario_name, inline=False)
                embed_promocao.add_field(name="Cargo Atual", value=cargo_mecanico_name, inline=False)
                embed_promocao.add_field(name="Promovido Por", value=promotor_mention, inline=False)
                embed_promocao.add_field(name="ID de Quem Promoveu", value=f"({promotor_id})", inline=False)
                embed_promocao.add_field(name="Promovido", value=promovido.mention, inline=False)

                # Enviar o embed no canal de log
                await canal_log.send(embed=embed_promocao)
                await interaction.response.send_message(f"Usu√°rio {promovido.mention} promovido com sucesso!", ephemeral=True)
            except discord.errors.Forbidden:
                await interaction.response.send_message("Permiss√µes insuficientes para editar o usu√°rio ou adicionar/remover cargos.", ephemeral=True)
        else:
            await interaction.response.send_message("Usu√°rio n√£o encontrado.", ephemeral=True)
    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)

# Tratamento de erros espec√≠fico para o comando /promover
@promover.error
async def promover_error(interaction: discord.Interaction, error):
    if isinstance(error, app_commands.MissingAnyRole):
        await interaction.response.send_message("Voc√™ n√£o tem permiss√£o para usar este comando.", ephemeral=True)
    else:
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)
        print(f"Erro no comando /promover: {error}")

# Comando /devedores
@bot.tree.command(name="devedores", description="Adicionar o cargo de devedor e o emoji de devedor no nome dos usu√°rios.")
@app_commands.describe(cargo="Cargo a ser verificado (mec, estag ou todos).")
@app_commands.checks.has_any_role(cargo_visualizacao_1_id, cargo_visualizacao_2_id)
async def devedores(interaction: discord.Interaction, cargo: str = None):
    try:
        guild = interaction.guild
        cargo_devedor = guild.get_role(cargo_devedor_id)
        cargo_devedor_adv = guild.get_role(cargo_devedor_adv_id)

        # Determina os cargos participantes
        if cargo is None or cargo.lower() == "todos":
            cargos_participantes = [cargo_mecanico_id, cargo_mecanico_senior_id, cargo_estagiario_id]
        elif cargo.lower() == "mec":
            cargos_participantes = [cargo_mecanico_id, cargo_mecanico_senior_id]  # Inclui os dois cargos aqui
        elif cargo.lower() == "estag":
            cargos_participantes = [cargo_estagiario_id]
        else:
            await interaction.response.send_message("Cargo inv√°lido. Use 'mec', 'estag' ou deixe em branco para todos.", ephemeral=True)
            return

        for cargo_id in cargos_participantes:
            cargo_participante = guild.get_role(cargo_id)
            for member in cargo_participante.members:
                await member.add_roles(cargo_devedor)
                nome_contratado = member.display_name.split("„Éª")[1].split(" | ")[0]
                id_cidade = member.display_name.split(" | ")[1]

                if cargo_id == cargo_mecanico_id:
                    novo_nome = f"üîßüëéüèª„Éª{nome_contratado} | {id_cidade}"
                    if cargo_devedor_adv in member.roles:
                        novo_nome = f"üîßüëéüèª‚ùå„Éª{nome_contratado} | {id_cidade}"
                elif cargo_id == cargo_mecanico_senior_id:  # Verifica para o cargo mec√¢nico s√™nior
                    novo_nome = f"üèÜüëéüèª„Éª{nome_contratado} | {id_cidade}"
                    if cargo_devedor_adv in member.roles:
                        novo_nome = f"üèÜüëéüèª‚ùå„Éª{nome_contratado} | {id_cidade}"
                else:
                    novo_nome = f"üî®üëéüèª„Éª{nome_contratado} | {id_cidade}"
                    if cargo_devedor_adv in member.roles:
                        novo_nome = f"üî®üëéüèª‚ùå„Éª{nome_contratado} | {id_cidade}"

                await member.edit(nick=novo_nome)

        await interaction.response.send_message("Os devedores foram marcados com sucesso.", ephemeral=True)
    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)

@devedores.error
async def devedores_error(interaction: discord.Interaction, error):
    if isinstance(error, app_commands.MissingAnyRole):
        await interaction.response.send_message("Voc√™ n√£o tem permiss√£o para usar este comando.", ephemeral=True)
    else:
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)
        print(f"Erro no comando /devedores: {error}")

# Comando /pago
@bot.tree.command(name="pago", description="Remover o emoji de devedor do nome do usu√°rio.")
@app_commands.describe(usuario="Usu√°rio a ser atualizado (men√ß√£o ou ID)")
@app_commands.checks.has_any_role(cargo_visualizacao_1_id, cargo_visualizacao_2_id)
async def pago(interaction: discord.Interaction, usuario: str):
    try:
        # Verificar se o par√¢metro √© uma men√ß√£o ou um ID
        if usuario.startswith("<@") and usuario.endswith(">"):
            id_discord = int(usuario[3:-1].replace("!", ""))  # Extrair ID da men√ß√£o
        else:
            id_discord = int(usuario)  # Converter para int se for um ID

        guild = interaction.guild
        devedor = guild.get_member(id_discord)
        cargo_devedor_adv = guild.get_role(cargo_devedor_adv_id)

        if devedor:
            nome_contratado = devedor.display_name.split("„Éª")[1].split(" | ")[0]
            id_cidade = devedor.display_name.split(" | ")[1]

            if any(role.id == cargo_mecanico_id for role in devedor.roles):
                novo_nome = f"üîß‚úÖ„Éª{nome_contratado} | {id_cidade}"
                if cargo_devedor_adv in devedor.roles:
                    novo_nome = f"üîß‚úÖ‚ùå„Éª{nome_contratado} | {id_cidade}"
            elif any(role.id == cargo_mecanico_senior_id for role in devedor.roles):
                novo_nome = f"üèÜ‚úÖ„Éª{nome_contratado} | {id_cidade}"
                if cargo_devedor_adv in devedor.roles:
                    novo_nome = f"üèÜ‚úÖ‚ùå„Éª{nome_contratado} | {id_cidade}"
            elif any(role.id == cargo_estagiario_id for role in devedor.roles):
                novo_nome = f"üî®‚úÖ„Éª{nome_contratado} | {id_cidade}"
                if cargo_devedor_adv in devedor.roles:
                    novo_nome = f"üî®‚úÖ‚ùå„Éª{nome_contratado} | {id_cidade}"
            else:
                await interaction.response.send_message("Usu√°rio n√£o possui o cargo de mec√¢nico ou estagi√°rio.", ephemeral=True)
                return

            cargo_devedor = guild.get_role(cargo_devedor_id)
            await devedor.remove_roles(cargo_devedor)
            await devedor.edit(nick=novo_nome)

            await interaction.response.send_message(f"Usu√°rio {devedor.mention} teve o status de devedor removido com sucesso.", ephemeral=True)
        else:
            await interaction.response.send_message("Usu√°rio n√£o encontrado.", ephemeral=True)
    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)

@pago.error
async def pago_error(interaction: discord.Interaction, error):
    if isinstance(error, app_commands.MissingAnyRole):
        await interaction.response.send_message("Voc√™ n√£o tem permiss√£o para usar este comando.", ephemeral=True)
    else:
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)
        print(f"Erro no comando /pago: {error}")

# Comando /limpar
@bot.tree.command(name="limpar", description="Retornar os usu√°rios para seus nomes padr√µes.")
@app_commands.checks.has_any_role(cargo_visualizacao_1_id, cargo_visualizacao_2_id)
async def limpar(interaction: discord.Interaction):
    try:
        guild = interaction.guild
        cargo_estagiario = guild.get_role(cargo_estagiario_id)
        cargo_mecanico = guild.get_role(cargo_mecanico_id)
        cargo_mecanico_senior = guild.get_role(cargo_mecanico_senior_id)  # Adicionado o cargo_mecanico_senior_id
        cargo_devedor_adv = guild.get_role(cargo_devedor_adv_id)

        # Adiciona os membros com os cargos mec√¢nico, mec√¢nico s√™nior ou estagi√°rio √† lista de membros para limpar
        membros_para_limpar = [
            m for m in guild.members 
            if cargo_estagiario in m.roles or cargo_mecanico in m.roles or cargo_mecanico_senior in m.roles
        ]

        for membro in membros_para_limpar:
            nome_contratado = membro.display_name.split("„Éª")[1].split(" | ")[0]
            id_cidade = membro.display_name.split(" | ")[1]

            if cargo_mecanico in membro.roles:
                novo_nome = f"üîß„Éª{nome_contratado} | {id_cidade}"
                if cargo_devedor_adv in membro.roles:
                    novo_nome = f"üîß‚ùå„Éª{nome_contratado} | {id_cidade}"
            elif cargo_mecanico_senior in membro.roles:  # Adicionada verifica√ß√£o para mec√¢nico s√™nior
                novo_nome = f"üèÜ„Éª{nome_contratado} | {id_cidade}"
                if cargo_devedor_adv in membro.roles:
                    novo_nome = f"üèÜ‚ùå„Éª{nome_contratado} | {id_cidade}"
            elif cargo_estagiario in membro.roles:
                novo_nome = f"üî®„Éª{nome_contratado} | {id_cidade}"
                if cargo_devedor_adv in membro.roles:
                    novo_nome = f"üî®‚ùå„Éª{nome_contratado} | {id_cidade}"
            else:
                continue

            await membro.edit(nick=novo_nome)

        await interaction.response.send_message("Os nomes dos usu√°rios foram limpos com sucesso.", ephemeral=True)
    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)

# Comando /exonerar
@bot.tree.command(name="exonerar", description="Remover todos os cargos do usu√°rio e adicionar o cargo de exonerado.")
@app_commands.describe(ids="IDs ou men√ß√µes dos usu√°rios a serem exonerados, separados por v√≠rgula", motivo="Motivo da exonera√ß√£o")
@app_commands.checks.has_any_role(cargo_visualizacao_1_id, cargo_visualizacao_2_id)
async def exonerar(interaction: discord.Interaction, ids: str, motivo: str):
    try:
        guild = interaction.guild
        cargo_exonerado = guild.get_role(cargo_exonerado_id)
        executor = interaction.user.mention

        ids_discord = []
        for id_str in ids.split(","):
            id_str = id_str.strip()
            if id_str.startswith("<@") and id_str.endswith(">"):
                ids_discord.append(int(id_str[3:-1].replace("!", "")))  # Extrai o ID do usu√°rio da men√ß√£o
            else:
                ids_discord.append(int(id_str))  # Converte para int se for um ID direto

        for id_discord in ids_discord:
            membro = guild.get_member(id_discord)
            if membro:
                # Ajustar o nome de exibi√ß√£o do membro exonerado
                if "„Éª" in membro.display_name and " | " in membro.display_name:
                    nome_contratado = membro.display_name.split("„Éª")[1].split(" | ")[0]
                    id_cidade = membro.display_name.split(" | ")[1]
                    novo_nome = f"[EX]„Éª{nome_contratado} | {id_cidade}"
                else:
                    novo_nome = f"[EX]„Éª{membro.display_name}"

                # Remover todos os cargos e adicionar o cargo exonerado
                await membro.edit(roles=[cargo_exonerado], nick=novo_nome)

                # Criar embed para a mensagem de exonera√ß√£o
                embed = discord.Embed(title="Exonera√ß√£o üö®", color=discord.Color.red())
                embed.add_field(name="Quem exonerou:", value=executor, inline=False)
                embed.add_field(name="Exonerado:", value=membro.mention, inline=False)
                embed.add_field(name="Nome:", value=membro.display_name, inline=False)
                embed.add_field(name="Motivo:", value=motivo, inline=False)

                # Enviar embed no privado do usu√°rio exonerado
                try:
                    await membro.send(embed=embed)
                except discord.Forbidden:
                    print(f"N√£o foi poss√≠vel enviar mensagem para {membro.display_name} ({membro.id}) no privado.")

                # Enviar embed de log no canal espec√≠fico
                canal_log = guild.get_channel(1249236243448070306)
                if canal_log:
                    await canal_log.send(embed=embed)

        await interaction.response.send_message("Usu√°rios exonerados com sucesso.", ephemeral=True)

    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)

@exonerar.error
async def exonerar_error(interaction: discord.Interaction, error):
    if isinstance(error, app_commands.MissingAnyRole):
        await interaction.response.send_message("Voc√™ n√£o tem permiss√£o para usar este comando.", ephemeral=True)
    else:
        await interaction.response.send_message("Ocorreu um erro ao tentar executar este comando.", ephemeral=True)
        print(f"Erro no comando /exonerar: {error}")

# Fim do c√≥digo dos comandos /slash


# Quest√µes do exame // --------------------------- FIM DOS COMANDOS /SLASH ---------------------------------

#---------------------------------------------------------------PROVA--------------------------------------------------------

questoes_abertas = [
    "Por que quer ser mec√¢nico?",
    "Seu nome na cidade?",
    "Idade em N√°rnia?",
    "ID na cidade?",
    "ID de quem o recrutou?"
]

questoes_fechadas = [
    {"pergunta": "Para ser promovido de ESTAGIARIO para MEC√ÇNICO ter√° que cumprir quais requisitos?",
     "opcoes": ["03 DIAS e 6 HORAS TRABALHADAS", "6 DIAS e 3 HORAS TRABALHADAS", "3 HORAS ou 6 DIAS TRABALHADAS"],
     "correta": 0},
    {"pergunta": "Quando precisar ficar AFK (indispon√≠vel por um breve per√≠odo, como devo agir?",
     "opcoes": ["Posso ficar em servi√ßo, afinal retorno logo", "Avisar na r√°dio e depois retornar", "Sair do servi√ßo, sair da r√°dio, tirar roupa de mec√¢nico e sair da call üß∞ | ·¥á·¥ç s·¥á Ä·¥†…™√ß·¥è, pois se for pego em servi√ßo AFK serei advertido."],
     "correta": 2},
    {"pergunta": "Caso precise se ausentar na vida real como deve solicitar um atestado?",
     "opcoes": ["Se precisar me ausentar, solicito um atestado no canal üìÖ‚îÉ·¥Ñ·¥è ü·¥è·¥Ñ·¥Ä Ä-·¥Ä·¥õ·¥ás·¥õ·¥Ä·¥Ö·¥è. Se n√£o cumpri as metas conseguirei pedir meu atestado.",
                "Se precisar me ausentar, solicito um atestado no canal ‚ùå‚îÉ Ä·¥á·¥ç·¥è·¥†·¥á Ä-·¥Ä·¥õ·¥ás·¥õ·¥Ä·¥Ö·¥è. Se n√£o cumpri as metas n√£o conseguirei pedir meu atestado.",
                "Se precisar me ausentar, solicito um atestado no canal üìÖ‚îÉ·¥Ñ·¥è ü·¥è·¥Ñ·¥Ä Ä-·¥Ä·¥õ·¥ás·¥õ·¥Ä·¥Ö·¥è. Se n√£o cumpri as metas n√£o conseguirei pedir meu atestado."],
     "correta": 2},
    {"pergunta": "Como entrar em servi√ßo corretamente?",
     "opcoes": ["Ao iniciar o trabalho, ativar o comando toogle, entrar na call üß∞ | ·¥á·¥ç s·¥á Ä·¥†…™√ß·¥è, colocar o uniforme e entrar na r√°dio na frequ√™ncia 66.",
                "Ao iniciar o trabalho, entrar na call üß∞ | ·¥á·¥ç s·¥á Ä·¥†…™√ß·¥è, ativar o comando toogle e entrar na r√°dio na frequ√™ncia 66.",
                "Ao iniciar o trabalho, colocar o uniforme, entrar na call üß∞ | ·¥á·¥ç s·¥á Ä·¥†…™√ß·¥è e ativar o comando toogle."],
     "correta": 0},
    {"pergunta": "Qual o modo correto de uso dos ve√≠culos da mec√¢nica a seguir?",
     "opcoes": ["√â permitido usar os ve√≠culos da Mec√¢nica para uso pessoal, desde que estejam no estacionamento sem uso.",
                "√â proibido usar os ve√≠culos da Mec√¢nica para uso pessoal, mesmo que estejam no estacionamento sem uso",
                "√â proibido usar os ve√≠culos da Mec√¢nica para uso pessoal. Se encontrar algum no estacionamento sem uso, guarde-o no Blip."],
     "correta": 2},
    {"pergunta": "Quais os valores do reparo?",
     "opcoes": ["Dentro da Mec√¢nica: R$ 4.000, Fora: R$5,000",
                "Dentro da Mec√¢nica: R$ 8.000, Fora: R$10,000",
                "Dentro da Mec√¢nica: R$ 5.000, Fora: R$4,000"],
     "correta": 0},
    {"pergunta": "Qual a forma correta de desvirar e reparar um carro?",
     "opcoes": ["Mentalizar F9 e procurar no menu a op√ß√£o desvirar e reparar o carro",
                "Apenas escrever desvirar e reparar no F8 ou /desvirar e /reparar",
                "Escrever reparar no F8"],
     "correta": 1}
]

# Evento para registrar o clique no bot√£o "REALIZAR PROVA"
class ProvaView(View):
    def __init__(self, bot, user):
        super().__init__()
        self.bot = bot
        self.user = user

    @discord.ui.button(label="Realizar Prova", style=discord.ButtonStyle.green)
    async def realizar_prova(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("Iniciando sua prova!", ephemeral=True)
        # Cria um canal tempor√°rio para a prova
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            interaction.guild.get_role(cargo_visualizacao_1_id): discord.PermissionOverwrite(read_messages=True),
            interaction.guild.get_role(cargo_visualizacao_2_id): discord.PermissionOverwrite(read_messages=True),
            interaction.guild.get_role(cargo_prova_id): discord.PermissionOverwrite(read_messages=False)  # N√£o permite leitura do cargo_prova
        }
        channel = await interaction.guild.create_text_channel(f"prova-{interaction.user.display_name}", overwrites=overwrites)
        await iniciar_prova(interaction.user, channel)

# Fun√ß√£o para iniciar a prova
async def iniciar_prova(user, channel):
    respostas = {}
    pontuacao = 0

    for questao in questoes_abertas:
        embed = discord.Embed(title="Quest√£o Aberta", description=f"{questao}", color=discord.Color.light_grey())
        await channel.send(embed=embed)
        try:
            msg = await bot.wait_for('message', timeout=180.0, check=lambda m: m.author == user)
            respostas[questao] = msg.content
        except asyncio.TimeoutError:
            respostas[questao] = "n√£o respondida"
            await channel.send("Tempo esgotado! Voc√™ precisar√° iniciar outra prova.")
            await asyncio.sleep(10)
            await channel.delete()
            return
        await channel.purge(limit=100)

    for questao in questoes_fechadas:
        opcoes_str = "\n".join([f"{i+1}. {opcao}" for i, opcao in enumerate(questao['opcoes'])])
        embed = discord.Embed(title="Quest√£o Fechada", description=f"{questao['pergunta']}\n\n{opcoes_str}", color=discord.Color.light_grey())
        await channel.send(embed=embed)

        class RespostaView(View):
            def __init__(self, bot):
                super().__init__()
                self.bot = bot
                self.resposta_usuario = None

            @discord.ui.select(placeholder="Selecione sua resposta", options=[discord.SelectOption(label=f"Op√ß√£o {i+1}", description=opcao[:100], value=str(i)) for i, opcao in enumerate(questao['opcoes'])])
            async def select_callback(self, interaction: discord.Interaction, select: Select):
                self.resposta_usuario = int(select.values[0])
                await interaction.response.send_message(f"Voc√™ selecionou: {questao['opcoes'][self.resposta_usuario]}", ephemeral=True)
                self.stop()

        view = RespostaView(bot)
        await channel.send("Selecione sua resposta:", view=view)

        try:
            await view.wait()
            respostas[questao['pergunta']] = view.resposta_usuario
            if view.resposta_usuario == questao['correta']:
                pontuacao += 1
        except asyncio.TimeoutError:
            respostas[questao['pergunta']] = "n√£o respondida"
            await channel.send("Tempo esgotado! Voc√™ precisar√° iniciar outra prova.")
            await asyncio.sleep(10)
            await channel.delete()
            return
        await channel.purge(limit=100)

    _corrigir_prova = bot.get_channel(canal_corrigir_prova_id)
    if _corrigir_prova:
        embed = discord.Embed(title="Relat√≥rio de Prova", color=discord.Color.light_grey())
        embed.add_field(name="Prova realizada por", value=f"{user.mention} | {user.id}", inline=False)
        embed.add_field(name="Pontua√ß√£o", value=f"{pontuacao}/{len(questoes_fechadas)}", inline=False)

        for questao in questoes_abertas:
            embed.add_field(name=questao, value=f"R: {respostas.get(questao, 'n√£o respondida')}", inline=False)

        for questao in questoes_fechadas:
            resposta_usuario = respostas.get(questao['pergunta'], "n√£o respondida")
            resposta_correta = questao['opcoes'][questao['correta']]
            resposta_usuario_str = f"{int(resposta_usuario)+1}. {questao['opcoes'][int(resposta_usuario)]}" if resposta_usuario != "n√£o respondida" else "n√£o respondida"
            embed.add_field(name=questao['pergunta'], value=f"Resposta do Usu√°rio: {resposta_usuario_str}\nResposta Correta: {questao['correta']+1}. {resposta_correta}", inline=False)

        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1137047344903372941/1238973673671622666/marvel_gif_2.gif")
        await _corrigir_prova.send(embed=embed)

    await channel.send("Prova conclu√≠da! Contate um gerente. O canal ser√° fechado em 10 segundos.")
    await asyncio.sleep(10)
    await channel.delete()

# Fun√ß√£o para enviar ou editar a mensagem inicial
async def enviar_ou_editar_mensagem_inicial():
    canal_prova_aluno = bot.get_channel(canal_prova_aluno_id)
    if canal_prova_aluno:
        # Procurar a mensagem inicial anterior
        mensagem_inicial = None
        async for message in canal_prova_aluno.history(limit=10):
            if message.author == bot.user and message.embeds and message.embeds[0].title == "Benny's Originals: Prova":
                mensagem_inicial = message
                break

        embed = discord.Embed(title="Benny's Originals: Prova", description="Voc√™ ter√° 3 minutos para iniciar a prova ap√≥s clicar no bot√£o.", color=discord.Color.light_grey())
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1137047344903372941/1238973673671622666/marvel_gif_2.gif")
        embed.set_image(url="https://media.discordapp.net/attachments/1144673895299952700/1225200092634550312/SEJABEMVINDO-ezgif.com-video-to-gif-converter.gif?width=815&height=140")
        embed.set_footer(text="Fa√ßa sua parte e se junte a maior mec√¢nica da cidade!")

        view = ProvaView(bot, None)

        if mensagem_inicial:
            await mensagem_inicial.edit(embed=embed, view=view)
        else:
            await canal_prova_aluno.send(embed=embed, view=view)

@tasks.loop(minutes=2)
async def verificar_interacao():
    await enviar_ou_editar_mensagem_inicial()

#-----------------------------------------------------------------FIM PROVA---------------------------------------
# -------------------------------------------RANKING RELAT√ìRIOS---------------------------------------------------

async def buscar_mensagem_ranking(canal):
    async for mensagem in canal.history(limit=100):
        if mensagem.author == bot.user and mensagem.embeds and mensagem.embeds[0].title == "üëë Ranking de Relat√≥rios de Tunning Mensal":
            return mensagem
    return None

async def carregar_relatorios_antigos(channel):
    global relatorios
    print(f"Carregando relat√≥rios antigos entre {data_inicio} e {data_fim}...")
    async for message in channel.history(after=data_inicio, before=data_fim, limit=None):  # Busca todas as mensagens dentro do per√≠odo
        print(f"Processando mensagem antiga: {message.content}")
        await processar_relatorio(message, atualizacao_antiga=True)
    print("Carregamento de relat√≥rios antigos conclu√≠do.")

# Fun√ß√£o para processar um relat√≥rio (novo ou antigo)
async def processar_relatorio(message, atualizacao_antiga=False):
    global relatorios

    # Criar dicion√°rio de membros por ID (uma vez, no in√≠cio da fun√ß√£o)
    membros_por_id1 = {membro.id: membro for membro in message.guild.members}

    # Procura por n√∫meros na mensagem que s√£o IDs inteiros (n√£o partes de outros n√∫meros)
    for id_match in re.finditer(r"\b\d+\b", message.content):
        user_id = int(id_match.group(0))
        for membro in membros_por_id1.values():
            if str(user_id) == membro.display_name.split()[-1]:  # Verifica se o nome de exibi√ß√£o termina com o ID
                if any(cargo.id in cargos_desejados for cargo in membro.roles):
                    relatorios[membro.id] = relatorios.get(membro.id, 0) + 1
                    print(f"Relat√≥rio adicionado: {membro.display_name} agora tem {relatorios[membro.id]} relat√≥rios")
                break
        else:
            print(f"Erro: ID {user_id} n√£o encontrado na lista de membros.")  # Mensagem de erro para ID n√£o encontrado

    if not atualizacao_antiga:
        await exibir_ranking()  # Atualiza o ranking imediatamente se n√£o for uma atualiza√ß√£o antiga

# Fun√ß√£o para atualizar o ranking
async def exibir_ranking():
    global relatorios
    global mensagem_ranking

    # Buscar o canal correto para o ranking
    channel = bot.get_channel(canal_ranking_id)

    if not channel:
        print("Erro: Canal de ranking n√£o encontrado.")
        return

    # Buscar membros com os cargos desejados e seus totais de relat√≥rios
    membros_validos = []
    for role_id in cargos_desejados:
        role = channel.guild.get_role(role_id)
        if role:
            membros_validos.extend(role.members)

    # Ordenar os membros pelo total de relat√≥rios (decrescente)
    membros_validos.sort(key=lambda membro: relatorios.get(membro.id, 0), reverse=True)

    # Criar o ranking em formato de texto
    ranking_str = ""
    for i, membro in enumerate(membros_validos, start=1):
        posicao = "üèÜ`¬∫`" if i == 1 else f"`{i}¬∫`"
        total_relatorios = relatorios.get(membro.id, 0)  # Obter o total de relat√≥rios do membro
        ranking_str += f"{posicao} - {membro.mention}: {total_relatorios} relat√≥rios\n"

    # Obter o hor√°rio atual no fuso hor√°rio de S√£o Paulo
    current_time = datetime.now(timezone_brasil).strftime('%H:%M:%S')

    # Criar o embed do ranking
    embed = discord.Embed(title="üëë Ranking de Relat√≥rios de Tunning Mensal", description=ranking_str, color=0xffa500)
    embed.set_thumbnail(url=channel.guild.icon.url)
    embed.add_field(name="\u200b", value=f"**üì¨ Total de relat√≥rios: {sum(relatorios.values())}**", inline=False)
    embed.set_footer(text=f"üìÖ Desde\n`{data_inicio.strftime('%d %B')}` \n\n ‚è∞ √öltima atualiza√ß√£o: {current_time}")

    # Editar a mensagem existente ou enviar uma nova
    try:
        if mensagem_ranking:
            # Tentativa de editar a mensagem existente
            await mensagem_ranking.edit(embed=embed)
        else:
            # Enviar uma nova mensagem se mensagem_ranking n√£o existir
            mensagem_ranking = await channel.send(embed=embed)
    except discord.errors.NotFound:
        # Enviar uma nova mensagem se a mensagem existente n√£o for encontrada (foi deletada)
        mensagem_ranking = await channel.send(embed=embed)
    except discord.errors.HTTPException as e:
        print(f"Erro ao atualizar o ranking: {e}")

# Evento para registrar relat√≥rios
@bot.event
async def on_message(message):
    if message.channel.id == 1235035965945413649:  # Canal #relat-tunning
        # Converter a data da mensagem para offset-aware (UTC) e ajustar para o fuso hor√°rio de S√£o Paulo
        message_created_at_aware = message.created_at.replace(tzinfo=timezone.utc).astimezone(timezone_brasil)
        if data_inicio <= message_created_at_aware < data_fim:
            await processar_relatorio(message)

    await bot.process_commands(message)

# Evento para reduzir a contagem de relat√≥rios se a mensagem for apagada
@bot.event
async def on_message_delete(message):
    if message.channel.id == 1235035965945413649:  # Canal #relat-tunning
        await processar_relatorio_remocao(message)

# Evento para atualizar a contagem de relat√≥rios se a mensagem for editada
@bot.event
async def on_message_edit(before, after):
    if before.channel.id == 1235035965945413649:  # Canal #relat-tunning
        await processar_relatorio_remocao(before)
        await processar_relatorio(after)

# Fun√ß√£o para processar a remo√ß√£o de um relat√≥rio
async def processar_relatorio_remocao(message):
    global relatorios

    # Criar dicion√°rio de membros por ID (uma vez, no in√≠cio da fun√ß√£o)
    membros_por_id1 = {membro.id: membro for membro in message.guild.members}
    # Procura por n√∫meros na mensagem que s√£o IDs inteiros (n√£o partes de outros n√∫meros)
    for id_match in re.finditer(r"\b\d+\b", message.content):
        user_id = int(id_match.group(0))
        for membro in membros_por_id1.values():
            if str(user_id) == membro.display_name.split()[-1]:  # Verifica se o nome de exibi√ß√£o termina com o ID
                if any(cargo.id in cargos_desejados for cargo in membro.roles):
                    # Subtrair 1 do total de relat√≥rios
                    if membro.id in relatorios:
                        relatorios[membro.id] = max(relatorios.get(membro.id, 0) - 1, 0)
                        print(f"Relat√≥rio removido: {membro.display_name} agora tem {relatorios.get(membro.id, 0)} relat√≥rios")
                break
        else:
            print(f"Erro: ID {user_id} n√£o encontrado na lista de membros.")  # Mensagem de erro para ID n√£o encontrado

    # Atualiza o ranking imediatamente
    await exibir_ranking()

# ------------------------------------------------------------------------------FIM RANK RELAT√ìRIOS---------------------------------------
# Tarefa para salvar dados periodicamente
@tasks.loop(minutes=5)  # Ajuste o intervalo conforme necess√°rio
async def salvar_dados():
    with open(relatorios_path, 'w') as f:
        json.dump(relatorios, f)

# Evento para registrar sa√≠das de membros
@bot.event
async def on_member_remove(member):
    guild = member.guild
    channel_id = 1235035965391765566  # Substitua pelo ID do seu canal

    embed = discord.Embed(title="Um membro saiu!", color=discord.Color.red())
    embed.set_thumbnail(url=member.display_avatar.url)

    embed.add_field(name="DISCORD:", value=member.mention, inline=False)
    embed.add_field(name="ID DISCORD:", value=member.id, inline=False)
    embed.add_field(name="Nome:", value=member.display_name, inline=False)  # Usa o nickname

    roles = ", ".join([role.name for role in member.roles if role.name != '@everyone'])
    embed.add_field(name="Cargos Antes da Sa√≠da:", value=roles, inline=False)

    embed.set_footer(text=f"{member.guild.name}")

    channel = guild.get_channel(channel_id)
    if channel:
        await channel.send(embed=embed)

# Fun√ß√£o para buscar a mensagem de hierarquia existente no canal
async def buscar_mensagem_hierarquia(channel):
    async for mensagem in channel.history(limit=100):
        if mensagem.author == bot.user and mensagem.content.startswith("# <@&"):
            return mensagem
    return None

# Fun√ß√£o para atualizar CANAL DA HIERARQUIA
async def atualizar_hierarquia(guild):
    global mensagem_hierarquia

    hierarquia_str = ""

    # Construindo a string da hierarquia
    for role_id, role_name in roles_hierarchy.items():
        role = guild.get_role(role_id)
        if role:
            members = [member.mention for member in role.members]
            if members:
                hierarquia_str += f"# <@&{role_id}>\n"  # Usando men√ß√£o real ao cargo
                hierarquia_str += "\n".join(members)
                hierarquia_str += "\n\n"  # Espa√ßo entre os cargos

    # Encontrar o canal de hierarquia
    channel = guild.get_channel(canal_hierarquia_id)

    if not channel:
        print("Erro: Canal de hierarquia n√£o encontrado.")
        return

    # Buscar a mensagem existente, se ainda n√£o foi armazenada
    if not mensagem_hierarquia:
        mensagem_hierarquia = await buscar_mensagem_hierarquia(channel)

    # Se j√° existir uma mensagem, edite-a, sen√£o, envie uma nova mensagem
    if mensagem_hierarquia:
        try:
            await mensagem_hierarquia.edit(content=hierarquia_str)
        except discord.errors.NotFound:
            mensagem_hierarquia = await channel.send(hierarquia_str)
    else:
        mensagem_hierarquia = await channel.send(hierarquia_str)

# Eventos para monitorar mudan√ßas de cargo
@bot.event
async def on_member_update(before, after):
    if before.roles != after.roles:  # Se os cargos mudaram
        await atualizar_hierarquia(after.guild)

@bot.event
async def on_guild_role_update(before, after):
    await atualizar_hierarquia(before.guild)

# Fun√ß√£o para atualizar a embed
async def atualizar_embed_devedores(guild):
    canal = bot.get_channel(CANAL_DEVEDORES_ID)
    if canal is None:
        print("Canal de devedores n√£o encontrado.")
        return

    embed = discord.Embed(title="Hierarquia: Devedores", color=discord.Color.red())
    
    # Montando a hierarquia com base nos cargos
    for cargo_nome, cargo_id in CARGO_IDS.items():
        cargo = guild.get_role(cargo_id)
        if cargo is None:
            continue
        
        membros_com_cargo = [membro.mention for membro in guild.members if cargo in membro.roles]
        membros_texto = '\n'.join(membros_com_cargo) if membros_com_cargo else "0"
        
        embed.add_field(name=f"{cargo.name}:", value=membros_texto, inline=False)
    
    # Editar ou enviar a mensagem no canal
    mensagem_existente = None
    async for mensagem in canal.history(limit=100):
        if mensagem.author == bot.user and mensagem.embeds:
            mensagem_existente = mensagem
            break
    
    if mensagem_existente:
        await mensagem_existente.edit(embed=embed)
    else:
        await canal.send(embed=embed)

# Evento para atualizar a hierarquia quando o membro receber ou perder um cargo
@bot.event
async def on_member_update(before, after):
    # Verificar se algum cargo relacionado foi adicionado ou removido
    cargos_anteriores = set(before.roles)
    cargos_atualizados = set(after.roles)
    
    cargos_adicionados = cargos_atualizados - cargos_anteriores
    cargos_removidos = cargos_anteriores - cargos_atualizados
    
    if any(cargo.id in CARGO_IDS.values() for cargo in cargos_adicionados) or \
       any(cargo.id in CARGO_IDS.values() for cargo in cargos_removidos):
        await atualizar_embed_devedores(after.guild)

# Evento on_ready para enviar a prova, a mensagem inicial da hierarquia, carregar comandos slash e o bot de horas
@bot.event
async def on_ready():
    #iniciar canal devedores
    for guild in bot.guilds:
        await atualizar_embed_devedores(guild)

    # Canal hierarquia
    guild = bot.guilds[0]  # Supondo que o bot esteja em um √∫nico servidor
    await atualizar_hierarquia(guild)

    # Sincronizar os comandos do bot
    await bot.tree.sync()

        # Criar um dicion√°rio de membros por ID ~~RANKING mensal
    global membros_por_id1
    membros_por_id1 = {membro.id: membro for membro in bot.get_all_members()}

    # Carregar relat√≥rios antigos e exibir o ranking inicial
    try:
        canal_relatorios = bot.get_channel(1235035965945413649)  # Canal #relat-tunning
        if canal_relatorios:
            await bot.wait_until_ready()  # Esperar o bot estar pronto
            await carregar_relatorios_antigos(canal_relatorios)  # Carregar relat√≥rios antigos
            await exibir_ranking()  # Exibir o ranking inicial
    except discord.errors.NotFound:
        print("Erro: Canal de relat√≥rios n√£o encontrado.")
    except discord.errors.Forbidden:
        print("Erro: O bot n√£o tem permiss√£o para ler o hist√≥rico de mensagens do canal.")

    # Enviar ou editar a mensagem inicial (relacionada √† hierarquia ou outra funcionalidade)
    await enviar_ou_editar_mensagem_inicial()

    # Iniciar a verifica√ß√£o de intera√ß√£o
    if not verificar_interacao.is_running():
        verificar_interacao.start()

    print(f'Bot conectado como {bot.user}')

load_dotenv()
# Rodar o bot com o token do ambiente
bot.run(os.getenv("DISCORD_TOKEN"))